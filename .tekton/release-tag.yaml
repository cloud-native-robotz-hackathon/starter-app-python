apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: release-tag

  labels:
    tekton.dev/pipeline: build
  annotations:
    pipelinesascode.tekton.dev/on-event: "[push]"
    # The branch or tag we are targeting (ie: main, refs/tags/*)
    pipelinesascode.tekton.dev/on-target-branch: "[refs/tags/*]"

    pipelinesascode.tekton.dev/task: "git-clone"
    pipelinesascode.tekton.dev/task-1: "buildah"

    # Use maven task from hub
    # pipelinesascode.tekton.dev/task-1: "[pre-commit]"

    # You can add more tasks in here to reuse, browse the one you like from here
    # https://hub.tekton.dev/
    # example:
    # pipelinesascode.tekton.dev/task-2: "[.tekton/task/github-add-labels.yaml]"
    # pipelinesascode.tekton.dev/task-3: "[.tekton/task/github-add-comment.yaml]"

    # How many runs we want to keep attached to this event
    pipelinesascode.tekton.dev/max-keep-runs: "1"

spec:
  params:
    - name: source_branch
      value: '{{ source_branch }}'
    - name: repo_url
      value: '{{ repo_url }}'
    - name: target_namespace
      value: '{{ target_namespace }}'
    - name: revision
      value: '{{ revision }}'

  taskRunSpecs:
    # Build the amd64 image on dedicated amd64 hardware
    - pipelineTaskName: build-on-amd64
      taskPodTemplate:
        nodeSelector:
          kubernetes.io/arch: amd64
      # validation failed: computeResources requires "enable-api-fields" feature gate to be "alpha" but it is "stable":
      # computeResources:
      #   requests:
      #     cpu: 1
      #   limits:
      #     cpu: 1

    # Build the arm64 image on dedicated arm64 hardware
    - pipelineTaskName: build-on-arm64
      taskPodTemplate:
        nodeSelector:
          kubernetes.io/arch: arm64
        tolerations:
          - key: "kubernetes.io/arch"
            operator: "Equal"
            value: "arm"
            effect: "NoSchedule"
      # validation failed: computeResources requires "enable-api-fields" feature gate to be "alpha" but it is "stable":
      # computeResources:
      #   requests:
      #     cpu: 1
      #     memory: "1G"
      #   limits:
      #     cpu: 1
      #     memory: "1G"

  pipelineSpec:
    params:
      - name: source_branch
      - name: repo_url
      - name: target_namespace
      - name: revision

    workspaces:
      - name: source
    tasks:
      - name: git-clone
        params:
          - name: URL
            value: $(params.repo_url)
          - name: REVISION
            value: $(params.revision)
          - name: DEPTH
            value: 0
        taskRef:
          resolver: cluster
          params:
            - name: kind
              value: task
            - name: name
              value: git-clone
            - name: namespace
              value: openshift-pipelines
        workspaces:
          - name: output
            workspace: source

      - name: tag
        params:
          - name: source_branch
            value: $(params.source_branch)
        taskSpec:
          results:
            - name: name
              descripte: Clean tag based on source_branch
          steps:
            - name: transform-tag
              image: registry.access.redhat.com/ubi9/ubi-micro:latest
              script: |
                set -x
                SOURCE_BRANCH="$(params.source_branch)"
                echo -n ${SOURCE_BRANCH#refs/tags/} | tee $(results.name.path)

      - name: build-on-arm64
        params:
          - name: IMAGE
            value: 'image-registry.openshift-image-registry.svc.cluster.local:5000/$(params.target_namespace)/starter-app-python:$(tasks.tag.results.name)-arm64'
          - name: DOCKERFILE
            value: ./Containerfile
        runAfter:
          - git-clone
          - tag
        taskRef:
          resolver: cluster
          params:
            - name: kind
              value: task
            - name: name
              value: buildah
            - name: namespace
              value: openshift-pipelines
        workspaces:
          - name: source
            workspace: source

      - name: build-on-amd64
        params:
          - name: IMAGE
            value: 'image-registry.openshift-image-registry.svc.cluster.local:5000/$(params.target_namespace)/starter-app-python:$(tasks.tag.results.name)-amd64'
          - name: DOCKERFILE
            value: ./Containerfile
        runAfter:
          - build-on-arm64
        taskRef:
          resolver: cluster
          params:
            - name: kind
              value: task
            - name: name
              value: buildah
            - name: namespace
              value: openshift-pipelines
        workspaces:
          - name: source
            workspace: source

      - name: create-and-push-manifest
        runAfter:
          - build-on-amd64
        params:
          - name: IMAGE
            value: 'image-registry.openshift-image-registry.svc.cluster.local:5000/$(params.target_namespace)/starter-app-python:$(tasks.tag.results.name)'
          - name: IMAGE_URL_AMD64
            value: $(tasks.build-on-amd64.results.IMAGE_URL)
          - name: IMAGE_URL_ARM64
            value: $(tasks.build-on-arm64.results.IMAGE_URL)
        workspaces:
          - name: source
            workspace: source

        taskSpec:
          volumes:
            - emptyDir: {}
              name: varlibcontainers
          workspaces:
            - name: source
            - description: >-
                An optional workspace that allows providing a .docker/config.json file
                for Buildah to access the container registry. The file should be placed
                at the root of the Workspace with name config.json or .dockerconfigjson.
              name: dockerconfig
              optional: true
          params:
            - description: Reference of the image buildah will produce.
              name: IMAGE
              type: string
            - default: registry.redhat.io/rhel9/buildah:9.4
              description: The location of the buildah builder image.
              name: BUILDER_IMAGE
              type: string
            - name: IMAGE_URL_AMD64
              type: string
            - name: IMAGE_URL_ARM64
              type: string
          steps:
            - name: create-and-push
              image: $(params.BUILDER_IMAGE)
              env:
                - name: IMAGE_URL_AMD64
                  value: $(params.IMAGE_URL_AMD64)
                - name: IMAGE_URL_ARM64
                  value: $(params.IMAGE_URL_ARM64)
              securityContext:
                capabilities:
                  add:
                    - SETFCAP
              volumeMounts:
                - mountPath: /var/lib/containers
                  name: varlibcontainers
              workingDir: $(workspaces.source.path)
              script: |
                if [[ "$(workspaces.dockerconfig.bound)" == "true" ]]; then

                  # if config.json exists at workspace root, we use that
                  if test -f "$(workspaces.dockerconfig.path)/config.json"; then
                    export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"

                  # else we look for .dockerconfigjson at the root
                  elif test -f "$(workspaces.dockerconfig.path)/.dockerconfigjson"; then
                    cp "$(workspaces.dockerconfig.path)/.dockerconfigjson" "$HOME/.docker/config.json"
                    export DOCKER_CONFIG="$HOME/.docker"

                  # need to error out if neither files are present
                  else
                    echo "neither 'config.json' nor '.dockerconfigjson' found at workspace root"
                    exit 1
                  fi
                fi
                set -x
                buildah manifest create localhost/list
                buildah manifest add localhost/list  $IMAGE_URL_AMD64
                buildah manifest add localhost/list  $IMAGE_URL_ARM64
                buildah manifest push localhost/list docker://$(params.IMAGE)

  workspaces:
    - name: source
      volumeClaimTemplate:
        metadata:
          creationTimestamp: null
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
          volumeMode: Filesystem
